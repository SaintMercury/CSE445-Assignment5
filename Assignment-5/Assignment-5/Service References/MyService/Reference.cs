//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Assignment_5.MyService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyService.IMyService")]
    public interface IMyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetForecast", ReplyAction="http://tempuri.org/IMyService/GetForecastResponse")]
        string[] GetForecast(string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetForecast", ReplyAction="http://tempuri.org/IMyService/GetForecastResponse")]
        System.Threading.Tasks.Task<string[]> GetForecastAsync(string zipcode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetCoordinates", ReplyAction="http://tempuri.org/IMyService/GetCoordinatesResponse")]
        string GetCoordinates(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetCoordinates", ReplyAction="http://tempuri.org/IMyService/GetCoordinatesResponse")]
        System.Threading.Tasks.Task<string> GetCoordinatesAsync(string address);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetDistanceByCoordinates", ReplyAction="http://tempuri.org/IMyService/GetDistanceByCoordinatesResponse")]
        string GetDistanceByCoordinates(double lat1, double lng1, double lat2, double lng2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetDistanceByCoordinates", ReplyAction="http://tempuri.org/IMyService/GetDistanceByCoordinatesResponse")]
        System.Threading.Tasks.Task<string> GetDistanceByCoordinatesAsync(double lat1, double lng1, double lat2, double lng2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetDistanceByAddress", ReplyAction="http://tempuri.org/IMyService/GetDistanceByAddressResponse")]
        string GetDistanceByAddress(string address1, string address2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetDistanceByAddress", ReplyAction="http://tempuri.org/IMyService/GetDistanceByAddressResponse")]
        System.Threading.Tasks.Task<string> GetDistanceByAddressAsync(string address1, string address2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetOperations", ReplyAction="http://tempuri.org/IMyService/GetOperationsResponse")]
        string[] GetOperations(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyService/GetOperations", ReplyAction="http://tempuri.org/IMyService/GetOperationsResponse")]
        System.Threading.Tasks.Task<string[]> GetOperationsAsync(string url);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyServiceChannel : Assignment_5.MyService.IMyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyServiceClient : System.ServiceModel.ClientBase<Assignment_5.MyService.IMyService>, Assignment_5.MyService.IMyService {
        
        public MyServiceClient() {
        }
        
        public MyServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetForecast(string zipcode) {
            return base.Channel.GetForecast(zipcode);
        }
        
        public System.Threading.Tasks.Task<string[]> GetForecastAsync(string zipcode) {
            return base.Channel.GetForecastAsync(zipcode);
        }
        
        public string GetCoordinates(string address) {
            return base.Channel.GetCoordinates(address);
        }
        
        public System.Threading.Tasks.Task<string> GetCoordinatesAsync(string address) {
            return base.Channel.GetCoordinatesAsync(address);
        }
        
        public string GetDistanceByCoordinates(double lat1, double lng1, double lat2, double lng2) {
            return base.Channel.GetDistanceByCoordinates(lat1, lng1, lat2, lng2);
        }
        
        public System.Threading.Tasks.Task<string> GetDistanceByCoordinatesAsync(double lat1, double lng1, double lat2, double lng2) {
            return base.Channel.GetDistanceByCoordinatesAsync(lat1, lng1, lat2, lng2);
        }
        
        public string GetDistanceByAddress(string address1, string address2) {
            return base.Channel.GetDistanceByAddress(address1, address2);
        }
        
        public System.Threading.Tasks.Task<string> GetDistanceByAddressAsync(string address1, string address2) {
            return base.Channel.GetDistanceByAddressAsync(address1, address2);
        }
        
        public string[] GetOperations(string url) {
            return base.Channel.GetOperations(url);
        }
        
        public System.Threading.Tasks.Task<string[]> GetOperationsAsync(string url) {
            return base.Channel.GetOperationsAsync(url);
        }
    }
}
